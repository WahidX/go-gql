package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"go-gql/todox"
	"go-gql/todox/model"
	"time"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	var lastName string
	if input.LastName == nil {
		lastName = ""
	} else {
		lastName = *input.LastName
	}

	return r.Resolver.Store.CreateUser(ctx, &model.User{
		ID:        uuid.NewString(),
		FirstName: input.FirstName,
		LastName:  lastName,
		Age:       input.Age,
	}), nil
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	return r.Resolver.Store.CreateTodo(ctx, &model.Todo{
		ID:        uuid.NewString(),
		Text:      input.Text,
		Done:      false,
		Timestamp: time.Now().Format(time.RFC3339),
		User: &model.User{
			ID: input.UserID,
		},
	}), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.Resolver.Store.GetUsers(ctx), nil
}

// UserTodos is the resolver for the userTodos field.
func (r *queryResolver) UserTodos(ctx context.Context, userID *string) ([]*model.Todo, error) {
	return r.Resolver.Store.UserTodos(ctx, *userID), nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.Resolver.Store.GetTodos(ctx), nil
}

// Mutation returns todox.MutationResolver implementation.
func (r *Resolver) Mutation() todox.MutationResolver { return &mutationResolver{r} }

// Query returns todox.QueryResolver implementation.
func (r *Resolver) Query() todox.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
